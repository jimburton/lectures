* Introduction to Functional Programming

#+BEGIN_center  
#+ATTR_ORG: :width 800
[[../common/images/logo7000.png]] 
#+END_center

* Scrabble: Developing software in Haskell

#+BEGIN_center  
#+ATTR_ORG: :width 800
[[../common/images/scrabble.jpeg]] 
#+END_center
* Getting started

  This lecture and the ones that follow it are based on the repository
  https://github.com/jimburton/scrabble.

  This repository contains a one- or two-player implementation of the
  *Scrabble* boardgame.

  The emphasis is not so much on how to implement scrabble but on
  developing a Haskell project with several parts and a decent amount
  of code.

* Getting started

  We produce a library that knows how to play the game (including an
  AI player) and is able to run on a server, fully decoupled from
  clients with which it communicates over the network using JSON.

#+BEGIN_center  
#+ATTR_ORG: :width 800
[[./images/webgame.png]] 
#+END_center

* Getting started

Commonly used data structures and libraries like ~Data.Text~, /maps/,
/arrays/, /aeson/ and /lens/ are explained, as well as /monadic error
checking/ and building a WebSocket client to the game that shows how
to use /threads/ and other concurrency abstractions safely.

Each chapter refines the initial solution, ending up with something
that is (hopefully) a clean, functional design that can easily be
extended.

* Where are we now?

So far, you have learned the basics of Haskell:

+ written lots of (small) functions, 
+ learned about recursion, folds, etc,
+ practised some ~IO~ and heard about typeclasses like ~Functor~
  and ~Monad~,
+ used ~cabal~ a little bit.
    
* The next steps

There is a notoriously *big gap* between learning the basics listed
above, which mostly means a lot of fiddling about with lists, and
finding yourself making useful, nicely written and idiomatic
software with Haskell.

For beginners the language can seem academic and far removed from
the tasks we normally want to achieve with programming languages.

When they look at Haskell code in the wild it bears little
resemblance to their exercises.

* The next steps

The Scrabble project is meant to go some way towards filling that
gap.

By the end you'll have been introduced to some major and widely used
libraries, sophisticated data structures, functional design
patterns, and means for structuring a Haskell project so that you
can keep on top of it as it grows.

I won't say it will take you from being a beginner-level to an
intermediate-level Haskell programmer;

Haskell is a deep language and if /Intermediate/ is halfway between
/Beginner/ and /Expert/ then that's a bit of a stretch.  But you won't
be a beginner any more.

* The repository

The repository is structured as a book in 8 chapters.

We won't have time to go through all of them in detail, but you can
do this as independent learning.

There is a branch in the repository for each chapter, named
~chapter1~, ~chapter2~, etc, up to ~chapter7~.

As you read each chapter you should check out the corresponding
branch and study the code.

There are exercises at the end of each chapter which expect you to be
working on the code from the right branch.

* Managing the code

We're using ~cabal~ to manage the project.

~cabal~ deals in /libraries/ and /executables/.

We will eventually be making several executables but the core code
for playing the game is contained in a library stanza.

As such, there isn't an entry point or any way for users to run the
code. It is there for ourselves and others to import into code that
*does* provide an interface for users.

*Demo:* ~scrabble.cabal~

* Building blocks

When you start writing any software you need to think about
modelling the problem in hand.

When we think of a game of Scrabble we can immediately anticipate
that we'll need to handle:

+ a *board*,
+ a number of *tiles*,
+ several *racks* containing tiles, and
+ a *bag*, also containing tiles.

* Building blocks

We also need to account for some things that we can't see:
+ the *game* itself, which consists of the objects mentioned plus
+ several *players*,
+ some additional state (e.g. whose *turn* it is).
+ the *score* of each player,
+ the *rules* of the game,
+ a *dictionary*.

* Letters and tiles

#+BEGIN_center  
#+ATTR_ORG: :width 800
[[images/tile.jpg]]
#+END_center

A tile consists of a *letter* and a *value*. We could create a
type alias such as

#+BEGIN_SRC haskell
type Tile = (Char,Int) 
#+END_SRC

* Letters and tiles

But then the type system wouldn't be able to rule out nonsense
values like ~('Â£',0)~, we might find ourselves needing to
distinguish between 'a' and 'A', and so on.

So we create an enumeration of all possible letters and make the
datatype derive some useful typeclasses:

#+BEGIN_SRC haskell
-- | Letters.  data Letter = A | B | C ... Z | Blank deriving (Show,
Read, Enum, Eq, Ord)
-- | A tile is a pair of a letter and a value.  type Tile =
(Letter,Int) 
#+END_SRC

* Letters and tiles

We will need to know a number of things about letters:

+ the score of each letter,
+ how many tiles bearing each letter should be in a full bag, and
+ the ~Char~ value for printing.

* Letters and tiles

We will store this data in \emph{maps}, using the \texttt{Data.Map}
API.

We could use a simple list of pairs with the type ~[(Letter,Int)]~
but maps are much more efficient (O(log n)) lookup tables.

Because it contains many functions whose names clash with those of
functions in the ~Prelude~, like ~filter~ and ~map~, this is
normally imported with a qualified name.

#+BEGIN_SRC haskell
  import           Data.Map (Map)
  import qualified Data.Map as M
#+END_SRC

* The board

A Scrabble board is a 15x15 matrix of rows and columns, so a natural
way to model it is as a two-dimensional array.

The values stored in the array will be ~Maybe Tile~ values
(i.e. either ~Nothing~ for an empty square, or something like ~Just
(A,1)~ for a square with an 'A' tile on it).

* The board

In many languages we would create an array of arrays to achieve
this, where each element of the 15-element outer array is a
15-element array representing a row.

However, Haskell supports true multi-dimensional arrays, so we can
create one where the type of indices is ~(Int,Int)~ (for our
purpose, ~(row,column)~).

#+BEGIN_SRC haskell
-- in Scrabble.Types
import Data.Array
-- | The board, a 2D array of Maybe letters and their scores.  type
Board = Array (Int,Int) (Maybe Tile) 
#+END_SRC

* The board

Then, if we have a board called ~b~ we can access the value in row
~r~, column ~c~, by ~b ! (r,c)~.

These ~(r,c)~ pairs are going to be used a lot so we make a type for
those too.

#+BEGIN_SRC haskell
-- | A position on the board.  type Pos = (Int,Int) 
#+END_SRC

* Words

/Words/, /racks/ and /bags/ are all just lists of letters, but it's
helpful to distinguish between them in type signatures so we make
aliases for each of them.

Because the ~Prelude~ includes a type called ~Word~ we have a name
clash here.

We could call our new type ~ScrabbleWord~ or something like that,
but it seems more convenient to keep the short name and hide the
type in the ~Prelude~, which we don't need anyway.

#+BEGIN_SRC haskell
import Prelude hiding (Word)
#+END_SRC

* Words on the board
A word we want to place on the board is a list of pairs of ~Pos~ and
~Tile~ values.

We'll call this a ~WordPut~.

#+BEGIN_SRC haskell
-- | A word placed on the board (tiles plus positions).  type WordPut
= [(Pos, Tile)] 
#+END_SRC

* Bonus squares

Last up for the board are the /bonus squares/.
These are either double or triple word bonuses, or double or triple
letter bonuses.

We make a datatype for bonuses and a map of their positions.
We will put everything other than the type for bonuses in its own
module to keep things tidy.

*Demo:* ~Scrabble.Types~ and ~Scrabble.Bonus~

* The dictionary

A copy of the standard English Scrabble dictionary as a text file
with one word per line is stored at ~dict/en.txt~.

It is a pretty big file, with more than *260,000* entries.

Obviously we need to store this in a data structure which is as
efficient as possible, especially when it comes to being searched.

* The dictionary

If we only ever wanted to look up words to see if they exist then a
/hashtable/ would be the best choice, with search taking O(1)
time.

However, we want to search in more flexible ways than this.

We are going to build a computer player at some point, so we might
want to find all words that can be made based on a collection of
letters, words that include existing tiles on the board, all words
that are prefixes of some other word and so on.

* The dictionary

There are several data structures that store words (or any sequence
of values) in ways that allow prefixes to be shared.

This not only saves a lot of space but allows the flexibility in
searching that we need.

The /trie/ [1] allows us to find a word and all of its prefixes very
quickly (in O(m) time, where /m/ is the length of the word --
i.e. independently of /n/, the size of the dictionary).

[1] https://en.wikipedia.org/wiki/Trie

* The trie

Here is an illustration of a trie storing the words /their/,
/there/, /answer/, /any/ and /bye/.

     root
    /  |  \
    t  a   b
    |  |   |
    h  n   y
    |  |\  |
    e  s y e
   /|  |
  i r  w
  | |  |
  r e  e
       |
       r
      
* The dictionary

We don't actually care what is stored at the leaves of the trie, as
we only need to know which paths in the trie exist.

So in each leaf we just store () ("unit"), which is the type with
exactly one value in it (also called (), "unit").

*Demo:* ~Scrabble.Types~ and ~Scrabble.Dict~

* Putting a word on the board

To create the initial empty board we can use the ~array~ function to
turn a list of pairs of indices and ~Nothing~ values into a 15x15
array.

Then we can put a ~WordPut~ onto the board.

The ~updateBoard~ function uses a fold to update the array with each
element of the ~WordPut~ in turn. The ~(//)~ operator is used in
~updateSquare~ to update the array.

*Demo:* ~Scrabble.Board~

* Retrieving a word from the board}

We can check whether a position on the board is occupied by a tile
with the functions ~onBoard~ and ~getSquare~ in ~Scrabble.Board~.

See also the ~Dir~ type and ~getDirection~.

* Retrieving a word from the board

Given an occupied position, if we know the direction we can find the
beginning of the ~WordPut~ it is part of.

Given the start of a ~WordPut~ we can retrieve the whole thing.
See ~Scrabble.Board~ and the functions ~wordOnRow~ and ~wordOnCol~.

*Demo* of querying board in ghci.

* Pretty-printing boards

We want a function that turns a board into text that looks something
remotely like a Scrabble board.

See ~Scrabble.Pretty~.

*Demo* of adding a word to the board and printing it.

* Testing

We need to think about what we want to be always true about the
types and functions we have created.

We use the ~QuickCheck~ library for property-based testing.
This means that we specify some property that we want our functions
to have and the library generates arbitrary input that checks
whether the property holds.

* Testing

The ~test-suite~ stanza in the config file deptermines what tests
should be run and how.

It points to the file ~tests/Main.hs~ as the entry point.

Run the tests with ~cabal run test-scrabble~.

* Testing

To test functions relating to boards we need to be able to generate
arbitrary values of ~Pos~, ~Letter~, ~WordPut~ and so on.

We write generators that use the ~QuickCheck~ library to do that in
~Test.Gen~.

*Demo:* ~Test.Gen~ and ~Test.Chapter1~

* Exercises

Have a go at the exercises at the end of Chapter 1!

* Players and the game

Now we can move on to think about /players/ and the /game/ itself.

A player has a /name/, a /rack/, a /score/ and might be an /AI/
player.

A game will have two players, a /board/, a /StdGen/ for
pseudo-randomness requirements, and several Boolean fields to keep
track of the progress of the game.

Most of this code is going into a new module, ~Scrabble.Game~.

* Players and the game

We introduce two record types, /Player/ and /Game/.

They embody everything we need to know to manage the state of games.

The types themselves are simple but we need to take a bit of a
digression to explain the way we will working with them.

*Demo:* ~Scrabble.Types~

* ~Data.Text~

The name of each player is stored as ~Data.Text~ rather than
~String~.

Wherever possible, when we need to store some text we will use the
~Text~ datatype instead of ~String~.

This is because ~String~, being a simple linked list, is very
inefficient.

Like ~Data.Map~, it is usual practice to import ~Data.Text~ with a
qualified name, apart from the name of the type itself which is
imported directly for convenience.

* ~Data.Text~

To make working with ~Text~ values easier, we turn on the
~OverloadedStrings~ extension in our code.

This means that any literal strings in our code are treated as
~Text~.

The extension is turned on in the ~cabal~ config file and by
including a "language pragma" (an instruction to the compiler) at
the top of any files that need it:

#+BEGIN_SRC haskell
{-# LANGUAGE OverloadedStrings #-} 
#+END_SRC

* Records, their clumsiness, and lenses

As the ~Player~ and ~Game~ datatypes are records we can create them
with named fields and update them by assigning those fields inside
braces.

The compiler creates an accessor function for each field with the same
name as the field.

#+BEGIN_SRC haskell
> let p = Player { _name = "Bob", _rack = [A, B, C, D, E, F, G],
> _score = 0} _name p "Bob" p { _name = "Alice", _score = 42 }
> Player { _name = "Alice" , _rack = [ A , B , C , D , E , F , G ] ,
> _score = 42 } 
#+END_SRC

* Records, their clumsiness, and lenses

Our main record will be ~Game~ and it has two ~Player~ values nested
within it.

As soon as we need to update values in this structure we encounter a
well-known problem -- the syntax for records makes this awkward.

Let's say we have a game called =g= and we want to increase
the score of Player 1 by 10:

#+BEGIN_SRC haskell
> let g' = g { _player1 = ( _player1 g) { _score = _score (
_player1 g) + 10 } } 
#+END_SRC

* Records, their clumsiness, and lenses

Oof!

Haskell is meant to be elegant...considering that in an OO language
we could probably do something like ~p.player1.score += 10~, this is
very cumbersome.

This is the problem that /lenses/ overcome.

Lenses are /first class getters and setters/ for records.

They can be composed, so they allow us to access and modify values
that are deeply nested in data, like the ~_score~ field above.

* Lenses

This isn't the place for an in-depth lens tutorial, and I'm hoping
to tell you just enough about them to understand the way they're
used in this project, which is very basic.

It's highly recommended that you do read such a tutorial eventually,
such as the standard one:

http://hackage.haskell.org/package/lens-tutorial-1.0.4/docs/Control-Lens-Tutorial.html

* Lenses

Each lens comes with two main functions: ~view~, which gives the
value of the field, and ~over~, which modifies its value.

Rather than using these functions by name we most often use one of
the lens operators.

If we define lenses for ~Player~ and ~Game~ and use one of the
standard lens librarys, we can rewrite the the code above like this:

#+BEGIN_SRC haskell
> let g' = g & player1 . score %~ (+10) g' ^. (player1 . score) 52
> 
#+END_SRC

* Lenses

As we can see from the differences in their names, \texttt{score}
and \texttt{player1} are not the accessor functions we saw before.

They are lenses.

Given a record, ~p~, with a field, ~score~, we can get the value of
~score~ with

#+BEGIN_SRC haskell
p ^. score 
#+END_SRC

* Lenses

We can set =score= to a new value, ~x~, with

#+BEGIN_SRC haskell
p & score .~ x 
#+END_SRC

and update its value by applying a function to it:

#+BEGIN_SRC haskell
p & score %~ foo 
#+END_SRC

* Lenses

The ~(&)~ operator is like ~($)~ but it takes its arguments in
reverse order, so our original lens function,

#+BEGIN_SRC haskell
g' = g & player1 . score %~ (+10) 
#+END_SRC

is the same as writing

#+BEGIN_SRC haskell
g' = (player1 . score %~ (+10)) g 
#+END_SRC

* Lenses

#+BEGIN_SRC haskell
(player1 . score %~ (+10)) g 
#+END_SRC

In the above ~g~ is applied to a function which is a lens made up of
~player1~ and ~score~ composed with the usual composition operator,
~(.)~.

Then comes the =(%~)= operator, which takes a lens as its
first argument and a function as its second, and supplies the value
from the lens to the function.

Haskell is still a purely functional language of course, so no change
is made to ~g~, but a new ~Game~ record is produced which we assign to
=g'=.

* Lenses

Lenses can be used to access the value of the field or to "change"
it.

Which purpose the lens serves depends on the context, which is set
by the lens operators involved.

For example, ~player1~ acts like a getter in

#+BEGIN_SRC haskell
g ^. player1 
#+END_SRC

It acts like a setter in

#+BEGIN_SRC haskell
g & player1 .~ p 
#+END_SRC

* Lenses

The ~(&)~ operator has a very simple type,

#+BEGIN_SRC haskell
(&) :: a -> (a -> b) -> b 
#+END_SRC

but is incredibly useful.

* Lenses

We use it to supply the object at the top of the chain (~g~) in a
readable left-to-right way.

Because a record update returns a new record we can also use it to
chain updates.

#+BEGIN_SRC haskell
g & player1 . score .~ s1 & player2 . score .~ s2 & gameOver .~
True 
#+END_SRC

* Lenses

To write a lens like =name= ourselves we could have written a
getter and a setter then used the built-in =lens= function to
combine them.

#+BEGIN_SRC haskell
getName :: Player -> Text getName (Player { _name = n }) = n
setName :: Player -> Text -> Player setName p n = p { _name = n }
name :: Lens' Player Text name = lens getName setName 
#+END_SRC

* Lenses

But doing this for every field is a lot of boilerplate code --
typing with no real thought required.

As we'll see we can get tools to do for us.

*Demo:* ~Scrabble.Types~

* Lens operators

We are going to stick to a small number of the most basic lens
operators:

+----------------+-------+---------------------------------------------------+
| Operator       | Name  | Example                                           |
+----------------+-------+---------------------------------------------------+
| (^.)           | view  | g ^. word: gets word in g.                        |
+----------------+-------+---------------------------------------------------+
| (.~)           | set   | g & word .~ "HELLO": sets the word of g to        |
|                |       | "HELLO".                                          |
+----------------+-------+---------------------------------------------------+
| (%~)           | over  | g & word %~ T.toUpper: applies T.toUpper to       |
|                |       | the word.                                         |
+----------------+-------+---------------------------------------------------+
| (&)            | apply | Reverse application, used for supplying the       |
|                |       | first record to a composed lens, and for chaining |
|                |       | operations.                                       |
+----------------+-------+---------------------------------------------------+

* Creating a game

To start a fresh game we need to create a full bag then two players,
each with a rack that has been filled with tiles taken at "random"
from the bag.

Then the two players and the depleted bag are added to the game
state.

*Demo:* ~Scrabble.Bag~

* Randomness

For the randomness, we are going to use a pseudo-random number
generator (PRNGs).

These are completely deterministic (i.e. non-random) data
structures.

They are created using a \emph{seed}, and can produce a stream of
values whose sequence is hard enough for humans to predict that it
appears to be truly random.

But there's nothing magical happening -- PRNGs created with the same
seed return the same stream of values, and ones in the same state
(i.e. in the same position in its stream of values) returns the same
value next.

* Randomness

Every time we use the PRNG it returns the latest value and an
updated version of itself, primed to return the next value.

So our function that fills a rack needs to take a rack to be filled,
a bag to fill the rack from and a PRNG as parameters, and return a
triple of the filled rack, the depleted bag and, crucially, the
updated PRNG.

The type for PRNGs that we'll be using is ~StdGen~.

*Demo:* ~Scrabble.Bag~ and ~fillRack~.

* Starting a game

When we start a game we need to begin with a new ~StdGen~.
We can get one created with a seed based on the system time using
~getStdGen~ then keep updating it throughout the game.

Because we don't want everything in our library to be polluted with
~IO~ we leave the call to ~getStdGen~ to clients and presume they
can supply one to the ~newGame~ function.

*Demo:* ~Scrabble.Game~ and ~newGame~.

* Testing

Our tests now need to involve ~IO~.

*Demo:* ~Test.Chapter2~.

* Exercises

Have a go at the exercises at the end of chapter 2.
