* CI505 Introduction to Functional Programming
#+BEGIN_center  
#+ATTR_ORG: :width 800
[[../common/images/logo7000.png]]
#+END_center

* Introduction to Functional Programming 

The functional paradigm is now widely recognised as *an essential tool
in tackling the hard problems of 21st century computing*.  

This paradigm emphasises the use of /functions/ and the avoidance of
/side effects/.

Combined with the use of powerful abstractions which are hard to
achieve using imperative languages, functional style can make programs
/safer/ and /easier to understand/.

* Introduction and overview

20 CATS over one semester.

- Functional approach to problem solving,

- Higher-order functions, immutable data and other ideas,

- Lambda calculus and other foundations,

- Haskell 2010: syntax, type system, idioms.

* Introduction and overview

- Writing larger functional programs, e.g. web applications,

- Functional concurrency and parallelism,

- Testing functional programs and other parts of the ecosystem,

- Extensions to Haskell 2010

* Assessment

- In-class tests with feedback. Both require you to write some short
  programs in Haskell that show you understand its syntax and can use a
  functional approach to problem solving. *[Week 3]*

- Programming assignment. Write a longer program that solves a problem
  that needs to be broken down into smaller parts. *[Week 5]*

* Paradigm > syntax

All programmers know several languages and switch between them for
different tasks.

Languages that have very similar features and promote a particular
approach to problem-solving occupy the same /paradigm/.

#+BEGIN_center  
#+ATTR_ORG: :width 800
[[./images/paradigm.jpg]]
#+END_center

* Paradigm > syntax

E.g. C, C++ and Java are /imperative/ languages -- you accomplish a
task by manipulating state -- assigning new values to locations in
memory.

This style of programming focuses on telling the computer *how* to
solve the problem:

#+BEGIN_SRC java
// adding a list of integers in Java
public int sum(List<Integer> list) {
  int result = 0;
  for (int i=0;i<list.length();i++) {
    result += list.get(i);
  }
  return result;
}
#+END_SRC

* Paradigm > syntax

Haskell, on the other hand, focuses on telling the computer *what*
problem to solve, not *how* to do it.

#+BEGIN_SRC haskell
-- Adding a list of integers in Haskell
sum :: [Int] -> Int
sum []     = 0
sum (x:xs) = x + sum xs
#+END_SRC

(In this respect, Haskell is a *declarative* language, like SQL, as
well as functional one.)

* Paradigm > syntax

Learning another language in a paradigm you already know means mastering
new *syntax* and *tools*, but won't change your practice as a programmer
much.

If you already know Java, learning C# is not going to blow your
mind...

However, learning a new /paradigm/ really can change the way you think
about programming and computation.

For instance, some of the hard problems in parallel computation become
"easy" in a functional setting.

* Haskell basics

We are using the purely functional language Haskell, sticking to the
2010 standard.

#+BEGIN_center  
#+ATTR_ORG: :width 800
[[./images/logo7000.png]]
#+END_center

Haskell has an industrial-strength, cross-platform compiler that
produces fast code, and a very powerful and modern type system which has
inspired changes to Python, Java and C#.

* Haskell basics

A quick overview of the syntax and features of Haskell.

We will come back to all of these ideas in later lectures, so don't
worry if you don't immediately understand something...

* Haskell basics

Types are really important in Haskell!

We have the basic types you'd expect:

+ Various kinds of numbers: =Int= (fixed precision, i.e. there is a
  maximum value), =Integer= (arbitrary precision), =Float= etc,

+ =Bool=, whose values are =True= and =False=,

+ =Char=, a character in single quotes, e.g. ='A'=,

+ =String=, given in double quotes, e.g. "Haskell" (a =String= is a
  /list/ of =Char= values), and

+ /Tuples/, e.g. =(42, True)=.

* Haskell basics

** The basic types

In Haskell two colons are used to state the type of a value.

E.g. read =x :: Int= as "=x= has the type =Int=" or "=x= is an =Int=".

The tuple type is made up of the the type of the things in it.

E.g. =(42, True) :: (Int, Bool)=
 
* Haskell basics

Comments can be single- or multi-line:

#+BEGIN_SRC haskell
{- A Multi
line
comment
 -}

-- A single line comment
#+END_SRC

* Haskell basics

** The function type

The type of a function is written with an "arrow":

=timesTwo :: Int -> Int=

This says that =timesTwo= is a function that accepts any =Int= value
as input and returns an =Int= value as output.

Pronounce the arrow as "to". So the type of =timesTwo= is read "=Int=
to =Int=". 

As well as stating the /type/, a function needs a /definition/:

#+BEGIN_SRC haskell
timesTwo :: Int -> Int
timesTwo x = x * 2
#+END_SRC

* Haskell functions

In the definition we give a name to the parameters to the function on
the left hand side of the equals sign.

=timesTwo= takes one argument, which we decided to call =x=. 

#+BEGIN_SRC haskell
timesTwo :: Int -> Int
timesTwo x = x * 2
#+END_SRC

On the right hand side of the equals sign comes the /body/ of the function.

Whatever the result of evaluating the body is, that's the return value
of the function (no need for a =return= statement).

* Haskell functions

Functions can take more than one parameter. The last type is always
the return type.

=multiply= takes two Ints and returns an Int. Its type is =Int= to
=Int= to =Int=.

#+BEGIN_SRC haskell
multiply  :: Int -> Int -> Int
multiply x y = x * y
#+END_SRC

* Haskell functions

They can also be defined /polymorphically/, i.e. working on any type,
like Java generics:

#+BEGIN_SRC haskell
makePair  :: a -> b -> (a, b)
makePair x y = (x, y)
#+END_SRC

* Haskell basics

In most cases we can leave out the type signatures if we want to -- the
Haskell compiler or interpreter will them.

However, type signatures tell anyone reading the code what it is meant
to do, so they are an important source of documentation.

Also, if the compiler disagrees with the type signature you supplied, it
will let you know!

* if .. then .. else

Unlike some languages, every =if= statement has to have an =else=
statement. 

#+BEGIN_SRC haskell
lt :: Int -> Int -> String
lt x y = if x < y then "True" else "False"
#+END_SRC

* if .. then .. else

We can put the =if= statement on one line, or over several lines.

#+BEGIN_SRC haskell
lt :: Int -> Int -> String
lt x y = if x < y 
         then "True" 
         else "False"
#+END_SRC

The indentation *must* be correct -- Haskell is *whitespace sensitive*.

* Pattern matching

This is a (silly) function that uses /pattern matching/.

#+BEGIN_SRC haskell
isABC :: Char -> Bool
isABC 'A' = True
isABC 'B' = True
isABC 'C' = True
isABC _   = False
#+END_SRC

Instead of naming the =Char= parameter to the function, we've given
several /patterns/ it might match.
 
There are four versions of the function (called /equations/), and
which one is applied will depend on which pattern matches the input.

The underscore pattern matches anything.

* Pattern matching

Pattern matching is a /very/ powerful feature. 

If you learn Haskell you will miss pattern matching when you go back
to other languages!

As well as matching something literally, we can use it to
"deconstruct" a parameter into its parts.

#+BEGIN_SRC haskell
fst :: (a, b) -> a
fst (x, y) = x
#+END_SRC

Here there is only one equation, but we use the pattern to give a name
to the parts of the tuple. Then we can refer to the part we need.

* Haskell basics

** Lists

Lists are very widely used, with special syntactic support.

- Literal lists, written in square brackets: =[1, 2, 3]=

- Ranges: =[1..99]=, =[1..]=

- Adding a value to the "head" of a list ("consing"): =’A’: [’b’, ’c’]=

- Joining ("concatenating") lists: =[1, 2, 3] ++ [4, 5, 6]=

- List comprehensions: =[(x, x) | x <- [0..]]=

* Pattern matching on lists

#+BEGIN_SRC haskell
null :: [a] -> Bool
null []     = True
null (x:xs) = False
#+END_SRC

The pattern =[]= matches the empty list.

The pattern =(x:xs)= matches a list with a head, which we're calling
=x=, and a /tail/, which we're calling =xs=. 

The tail might be empty, so all we know is that this list has at least
one element.

* Local variables

We often need to create and hang onto temporary values while
calculating the final value of the function.

We can do this with either =let= or =where=. 

* Haskell basics

#+BEGIN_SRC haskell
initials :: String -> String -> String  
initials firstname lastname = [f] ++ ". " ++ [l] ++ "."  
    where f = head firstname  
          l = head lastname  

initials :: String -> String -> String  
initials firstname lastname = let f = head firstname 
                                  l = head surname in
   [f] ++ ". " ++ [l] ++ "."  
#+END_SRC

* The head and tail of a list

How can we take the head of an empty list?

There is nothing to return...unlike some languages, we can't return
=null= but we can throw an =error=.

#+BEGIN_SRC haskell
head :: [a] -> a
head []     = error "empty list"
head (x:xs) = x
#+END_SRC

We can always take the tail of a list though, even if it is empty.

#+BEGIN_SRC haskell
tail :: [a] -> [a]
tail []     = []
tail (x:xs) = xs
#+END_SRC

* Recursion

Wherever you would use a loop in another language, you use /recursion/.

The /sum/ function adds up the contents of a list of =Int= values. 

#+BEGIN_SRC haskell
sum :: [Int] -> Int
sum []     = 0
sum (x:xs) = x + sum xs
#+END_SRC

* Haskell basics

** Summing a list of Ints

If the argument to =sum= is not the empty list it keeps calling itself
until the pattern for the empty list matches.

#+BEGIN_EXAMPLE
sum [5, 6, 7]
5 + (sum [6, 7])   -- Second equation of sum
5 + 6 + (sum [7])  -- Second equation of sum
5 + 6 + 7 + sum [] -- Second equation of sum
5 + 6 + 7 + 0      -- First equation of sum
18                 -- Addition (+)
#+END_EXAMPLE

* NB: A simple computational model

Note that in the previous slide we worked out what the =sum= function
does by replacing terms in a simple way.

Expanding expressions in this way is really useful practice when getting
to grips with functional programming for the first time.

It is made possible by the fact that our functions have no *side
effects*.

More on this later!

* Applying a function to every element of a list

=map= applies a function to every element in a list

#+BEGIN_SRC haskell
map :: (a -> b) -> [a] -> [b]
map f []     = []
map f (x:xs) = f x : map f xs
#+END_SRC

The first argument to =map= is itself a function. That makes it our
first /higher-order/ function. 

We can tell that because of the brackets in =(a -> b)=.

* Applying a function to every element of a list

We can =map= the =isABC= function we defined earlier of a list of
=Char= values. 

#+BEGIN_EXAMPLE
> map isABC ['A', 'B', 'C', 'D']
[True, True, True, False]
#+END_EXAMPLE

Because =isABC= takes a =Char= and returns a =Bool=, the result is a
list of =Bool= values.
* Filtering a list

Another function that takes a function as an argument. 

The first argument to =filter= is a /predicate/ function. =filter=
uses it to throw away anything for which the predicate is not true:

#+BEGIN_SRC haskell
filter :: (a -> Bool) -> [a] -> [a]
filter p []     = []
filter p (x:xs) = if p x 
                  then x : (filter p xs)
                  else filter p xs
#+END_SRC

#+BEGIN_EXAMPLE
> filter isABC "THE CAT SAT ON THE MAT"
"CAAA"
#+END_EXAMPLE

* User defined types: sum types

As well as using the types given to us, we can define our own.

#+BEGIN_SRC haskell
data Colour1 = Red | Blue | Green
#+END_SRC

=Colour1= is the type and =Red=, =Blue= etc are the possible values,
also called /data constructors/. 

A type like this where values are one of a series of possible values
is called a /sum type/.

* User defined types: product types

Data constructors can take arguments. This kind of type is known as
/product type/.

#+BEGIN_SRC haskell
data Colour2 = RGB Int Int Int

-- in ghci
> :t (RGB 42 0 99)
Colour2
#+END_SRC

* User defined types: records

The last type of data constructor is /records/. These are data types
with named fields.

#+BEGIN_SRC haskell
data Colour3 = Colour3 { red   :: Int
                       , green :: Int
                       , blue  :: Int
                       }
#+END_SRC

More on records later!

* User defined types

We can write functions using our new types and pattern match over
them:

#+BEGIN_SRC haskell
colour1ToStr :: Colour1 -> String
colour1ToStr Red   = "Red"
colour1ToStr Blue  = "Blue"
colour1ToStr Green = "Green"

mixColour2 :: Colour2 -> Colour2 -> Colour2
mixColour2 (RGB r1 g1 b1) (RGB r2 g2 b2) = 
              RGB (div (r1+r2) 2) (div (g1+g2) 2) (div (b1+b2) 2)
#+END_SRC

(=div= divides whole numbers whereas =/= is for real numbers.)
* Functional Programming

Functional programming is powerful and will make you a better
programmer!

Work through the Haskell exercises in the lab.

Work through the interactive tutorial online:
[[http://tryhaskell.org/]]

* Resources

- The Haskell wikibook: http://en.wikibooks.org/wiki/Haskell,

- Simon Thompson's book /Haskell: The Craft of Functional Programming/,

- /Real World Haskell/ (O'Reilly book): http://www.realworldhaskell.org


* Intermission

#+BEGIN_center  
#+ATTR_ORG: :width 800
[[../common/images/intermission.jpg]]
#+END_center

* More about functions

We saw several functions previously, some using pattern matching.

#+BEGIN_SRC haskell
square x = x * x

length []     = 0
length (x:xs) = 1 + length xs
#+END_SRC

The input to =length= is compared to the LHS patterns and the matching
definition is used. An underscore (wildcard) in a pattern matches
anything.

* Pattern guards

A more flexible way to do pattern matching is by using /guards/. 

Guards start with a =|= (called a pipe) and are followed by something
that evaluates to =Bool= or by a pattern matching expression:

#+BEGIN_SRC haskell
checkList :: [Int] -> String
checkList xs | null xs      = "Looks OK!"
             | 1  <- sum xs = "Hmmm, not sure."
             | otherwise    = "Nope."
#+END_SRC

* Functions and application

Functions are applied by supplying values -- no brackets or commas
required. 

#+BEGIN_SRC haskell
-- a ghci session...
> square 5
25

> sumsquares 5 4
41

> length [1, 2, 3]
3
#+END_SRC

* Functions and application

To create an /anonymous/ function, use the backslash symbol.

#+BEGIN_SRC haskell
-- a ghci session...
> (\xs -> if null xs then 0 else head xs) [4, 2]
4
#+END_SRC

* Functions and application

Functions are /higher order/. 

This means that they are that can be passed to other functions as
arguments, or form the return value of other functions.  

They can also be stored in lists, and whatever else we can do with
any other values...

#+BEGIN_SRC haskell
applyArith op x y = op x y

plus = applyArith (+)

> plus 2 2
4
#+END_SRC

* Functions and application

By default, functions are applied /infix/. We can apply them in an way using
backticks:

#+BEGIN_SRC haskell
> plus 5 4
9
> 5 `plus` 4
9
#+END_SRC

* Functions and application

We can define our functions as infix in the first place (making them
into /operators/), and use any non-reserved symbol:

#+BEGIN_SRC haskell
(<+>) :: Int -> Int -> Int
(<+>) x y = plus x y

> 5 <+> 4
9
#+END_SRC

* Partial application

There is no need to supply all inputs to a function at once. 

We can functions to create new that are "waiting" for the rest of the
arguments.

#+BEGIN_SRC haskell
-- a ghci session...
> let sumsquare5 = sumsquare 5
> :t sumsquare5
sumsquare5 :: Int -> Int
> sumsquare5 4
41
#+END_SRC

This is really useful! We'll be coming back to it...

* Sections and partial application

Here's another example of a function which has been partially applied.
=(+1)= is the function which takes an =Int= and adds one to it.

You can think of it as =(+)= "waiting" for its second argument.

#+BEGIN_EXAMPLE 
> map (+1) [1, 2, 3]
[2, 3, 4]
#+END_EXAMPLE

* Sections and partial application

And another: =(dropWhile isSpace)= is the function which takes a =String=
and removes leading spaces.

So =dropWhile= has received its first argument (a function that takes a
=Char= and returns =True= or =False=) and is "waiting" for its second
one, a =String=.

#+BEGIN_SRC haskell
> (dropWhile isSpace) "  2"
"2"
> map (dropWhile isSpace) ["  2", "f", " i"]
["2", "f", "i"]
#+END_SRC

* More Haskell features

** Pointsfree style

Writing code in a style means leaving the arguments out of the
definition. 

The simplest case is to omit the last argument: 

#+BEGIN_SRC haskell
toUpper :: Char -> Char

upperString :: String -> String
upperString s = map toUpper s

-- is the same as

upperString :: String -> String
upperString = map toUpper
#+END_SRC

(Think about the types of =map= and =toUpper=.)

* Functional composition

/Functional composition/ means combining two or more functions into a
single function. 

This is powerful way to reuse code.

The function (or operator) =(.)= "glues" two functions together:

#+BEGIN_SRC haskell
(.) :: (b -> c) -> (a -> b) -> a -> c
(.) f g x = g (f x)

> ((take 3) . drop 1) [1 .. 7]
[2, 3, 4]
#+END_SRC

Read =(.)= as "after". So the function above reads "=take 3= /after/
=drop 1=".

* Haskell is lazy!

Haskell's semantics are /call by need/. 

Terms will not be evaluated until they are needed.  

Laziness makes it easy to create infinite data structures, also known
as /streams/, or /codata/.

#+BEGIN_SRC haskell
ones :: [Int]
ones = 1 : ones

ints :: [Int]
ints = [1..]
#+END_SRC

* Functions and application

We have defined several arithmetic functions that only work for =Int=
values.  There are more number types though.

- =Int=: fixed precision integers.

- =Integer=: arbitrary precision integers.

- =Float= and =Double=: single and double precision floating point
  numbers.

These (and more) are all part of the =Num= /typeclass/.

* Typeclasses and overloading

Typeclasses provide support for generic programming and a form of
overloading. 

Similar to but not the same as Java interfaces:

#+BEGIN_SRC haskell
square :: Num a => a -> a
square x = x * x
#+END_SRC

This means that =square= is defined for /all numeric types/: integers,
real numbers, fractions...

* Typeclasses and overloading

Typeclasses are used wherever datatypes are expected to have something
in common.

A useful one is =Show=, the class of all things that can be printed out.

If a type, =t=, is a member of the =Show= typeclass then the =show=
function has to be defined for =t= values:

* Typeclasses and overloading

#+BEGIN_SRC haskell
class Show a where -- this is defined in the Prelude
  show :: a -> String
#+END_SRC

To say a type is in this typeclass,we need to provide a definition of
 =show=.

It is already defined for the standard types. 

* Typeclasses and overloading

When we create our own types we can add them to =Show= so that we can
print them out:

#+BEGIN_SRC haskell
data Colour1 = Red | Blue | Green

instance Show Colour1 where
  show Red   = "Red"
  show Blue  = "Blue"
  show Green = "Green"

> show Red
"Red"
#+END_SRC

* Typeclasses and overloading

We can get this for free using the =deriving= keyword:

#+BEGIN_SRC haskell 
data Colour1 = Red | Blue | Green deriving Show

> show Red
"Red"
#+END_SRC

* Typeclasses: Eq

If we make a new data type and we want to be able to say if two values
are equal or not, we have to say what means by making it an instance of
the =Eq= (pronounced /equals/) typeclass.

#+BEGIN_SRC haskell

class Eq a where
  (==) :: a -> a -> Bool
  (/=) :: a -> a -> Bool

data Colour = Red | Green | Blue deriving (Show, Eq)
#+END_SRC

* Typeclasses

#+BEGIN_SRC haskell

elem :: Eq a => a -> [a] -> Bool
elem x []     = False
elem x (y:ys) = if x == y then True else elem x ys  

> elem '.' "Why not."
True
> elem Red [Blue, Blue, Red, Green]
True
#+END_SRC

* More Haskell features

** Typeclasses: Ord

=Ord= is the class of things which can be ordered, i.e. one value can be
"larger" than another.

Note that for a type to be "orderable" it must already be in =Eq=.

#+BEGIN_SRC haskell
class Eq a => Ord a where
  compare :: a -> a -> Ordering
  (<) :: a -> a -> Bool
  ...

data Colour = Red | Green | Blue deriving (Show, Eq, Ord)

> Red < Green
False
#+END_SRC

* More Haskell features

Let's look at the =Ord= typeclass in a sorting algorithm.

The algorithm works like this:

1. Given an unsorted list, =xs=, pick a /pivot element/ in it, =p=.

2. Move everything in =xs= which is /less than or equal to p/ to the
   left of =p=.

3. Move everything in =xs= which is /greater than p/ to the right of =p=.

4. The elements to the left and right of =p= aren't sorted yet, but =p=
   is in its final position.

5. Recursively apply these steps to the unsorted lists to the left and
   right of =p=.

* Sorting with =Ord=

#+BEGIN_SRC haskell 
quicksort :: Ord a => [a] -> [a]
quicksort []     = []
quicksort (x:xs) = (quicksort lt) ++ [x] ++ (quicksort gt)
  where lt = filter (<= x) xs
        gt = filter (> x) xs
#+END_SRC

Read this carefully -- what are the contents of the lists =lt= and =gt=?
Where do the recursive calls take place?

* Functional Programming

Next week: Lists, tuples and some more handy types!

Work though the Haskell exercises in the lab.
